<% content_for :page do %>
  <div id="zgomot-documentation">
    <div id="documentation">
      <p>
      zgomot is a DSL for composing MIDI music. It does not do synthesis so to
      create sound it requires digital audio software such as Apple&#8217;s
      Garage Band, Logic or Abelton Live. A program that plays a simple tune only
      requires a few lines of code.
      </p>
      <pre>
      # mytune.rb
      require 'rubygems'
      require 'zgomot'

      # define a tune pattern with 5 notes and a rest
      tune = [n([:C,5]), n(:B), n(:R), n(:G), n(:C,:l=&gt;2), n([:E,5],:l=&gt;2)]

      # define a MIDI stream writing to channel 0 which plays the pattern 3 times
      str 'notes', tune, :lim=&gt;3 do |pattern|
          ch &lt;&lt; pattern
      end

      # write the MIDI stream
      play
      </pre>
      <p>
      Now, specify beats per minute, time signature and resolution in
      <tt>zgomot.yml</tt>. 
      </p>
      <pre>
      time_signature: 4/4
      beats_per_minute: 120
      resolution: 1/64    
      </pre>
      <p>
      Install the gem,
      </p>
      <pre>
      sudo gem install zgomot
      </pre>
      <p>
      Run the program to play the tune,
      </p>
      <pre>
      ruby mytune.rb         
      </pre>
      <p>
      A simple object model is defined by zgomot that makes it possible to write
      iterative transformations on note patterns within <tt>str</tt> blocks,
      which generate MIDI data streams. In the following details of the object
      model and supported transformations will be described.
      </p>
      <h2>OS X IAC Driver</h2>
      <p>
        For OS X the IAC Driver must be enabled for zgomot programs to communicate with the digital audio software used to render the generated MIDI stream. 
        To enable the IAC Driver open <em>Audio MIDI Setup</em>. Under the <em>Window</em> menu item select 
        <em>Show MIDI Window</em>. Find the <em>IAC Driver</em>, double click it and be sure <em>Device is online</em> is selected 
        and at least one port exists. 
      </p>
      <h2>Supported Platforms</h2>
      <p>
        zgomot has been tested on Ruby 1.8.7, 1.9.1 and 1.9.2. The only OS supported is OS X Snow Leopard.
      </p>
      <h2>Configuration</h2>
      <p>
      Three parameters are defined in the configuration file,
      <tt>zgomot.yml</tt>, that specify the timing of a composition.
      </p>
      <ul>
      <li><p>
      <b>time_signature</b>: Beats per measure.
      </p>
      </li>
      <li><p>
      <b>beats_per_minute</b>: To map to real time the beats per minute are
      specified.
      </p>
      </li>
      <li><p>
      <b>resolution</b>: Defines the length of a clock tick and is defined by the
      duration of the shortest note that can be played. In the first example this
      is a 64&#8217;th note. The maximum resolution is 1/1024 if your computer
      can do it.
      </p>
      </li>
      </ul>
      <h2>Pitch</h2>
      <p>
      Pitch is defined by a 2 dimensional array specifying the pitch class and
      octave, For example [:C, 4] would denote the note C at octave 4. Octave is
      an integer between -1 and 9 and acceptable values for pitch class with
      enharmonics, where <em>s</em> denotes a sharp, <em>b</em> a flat, and rest
      by :R are,
      </p>
      <pre>
      :C,  :Bs; 
      :Cs, :Db
      :D
      :Ds, :Ed
      :E,  :Fd
      :F,  :Es
      :Fs, :Gb
      :G, 
      :Gs,  :Ab
      :A,
      :As, :Bb,
      :B,  :Cb, 
      :R, 
      </pre>
      <h2>Notes</h2>
      <p>
      A note is defined by,
      </p>
      <pre>
      n(pitch, opts)    
      </pre>
      <p>
      Accepted options are,
      </p>
      <ul>
      <li><p>
      <tt>:l</tt>: Reciprocal length of note, Accepted values are 1, 2,
      4,&#8230;, max. Where max is the inverse resolution defined in
      <tt>zgomot.yml</tt>. Mapping to standard durations gives; 1 a whole note, 2
      a half note, 4 a quarter note, 8 and eighth note, &#8230; The default value
      is 4, a quarter note.
      </p>
      </li>
      <li><p>
      <tt>:v</tt>: The velocity of the note is a number between 0 ad 1 defining
      its loudness. Low values correspond to piano and larger values forte. The
      default is 0.6.
      </p>
      </li>
      </ul>
      <p>
      An F# half note at octave 5 with velocity 0.5 would be defined by,
      </p>
      <pre>
      n([:Fs, 5], :l =&gt; 2, :v =&gt; 0.5)          
      </pre>
      <h4>Transforms</h4>
      <p>
      Notes support the following transformations,
      </p>
      <ul>
      <li><p>
      <tt>bpm!(bpm)</tt>: change the bits per minute at which the note is played.
      </p>
      </li>
      <li><p>
      <tt>octave!(ocatve)</tt>: change the octave of the note.
      </p>
      </li>
      </ul>
      <h2>Chords</h2>
      <p>
      A chord is defined by,
      </p>
      <pre>
      c(root, interval, opts)    
      </pre>
      <p>
      Only trichords are supported. Here root is the chord root pitch and
      interval is the interval type. Accepted values of the interval type are:
      <tt>:maj</tt>, <tt>:min</tt>, <tt>:dim</tt>, <tt>:aug</tt>, <tt>:sus2</tt>,
      <tt>:sus4</tt>, representing major, minor, diminished, augmented, suspended
      second and suspended forth chord intervals respectively. If not specified
      the default value of interval is <tt>:maj</tt>.
      </p>
      <p>
      Accepted options are,
      </p>
      <ul>
      <li><p>
      <tt>:l</tt>: Reciprocal length of chord, Accepted values are 1, 2,
      4,&#8230;, max. Where max is the inverse resolution defined in
      <tt>zgomot.yml</tt>. Mapping to standard durations gives; 1 a whole note, 2
      a half note, 4 a quarter note, 8 and eighth note, &#8230; The default value
      is 4, a quarter note.
      </p>
      </li>
      <li><p>
      <tt>:v</tt>: The velocity of the note is a number between 0 ad 1 defining
      its loudness. Low values correspond to piano and larger values forte. The
      default is 0.6.
      </p>
      </li>
      </ul>
      <p>
      An F# half note minor chord at octave 5 with velocity 0.5 would be defined
      by,
      </p>
      <pre>
      c([:Fs, 5], :min, :l =&gt; 2, :v =&gt; 0.5)
      </pre>
      <h4>Transforms</h4>
      <p>
      Chords support the following transformations,
      </p>
      <ul>
      <li><p>
      <tt>bpm!(bpm)</tt>: change the bits per minute at which the chord is
      played.
      </p>
      </li>
      <li><p>
      <tt>octave!(ocatve)</tt>: change the octave of the chord.
      </p>
      </li>
      <li><p>
      <tt>arp!(length)</tt>: arpeggiate the chord using the specified length in
      units of note length. Accepted values are 1, 2, 4, 8, &#8230; resolution,
      representing arpeggiation by a whole note, half note, quarter note, eighth
      note up to the specified clock resolution.  
      </p>
      </li>
      <li><p>
      <tt>inv!(number)</tt>: Invert the chord. When 0 the chord is unchanged, 1
      is the first inversion and 2 is the second. Higher inversions just shift
      the chord to a higher octave.
      </p>
      </li>
      <li><p>
      <tt>rev!</tt>: Reverse the order in which the notes are played. Only
      noticeable if the chord is also arpeggiated.
      </p>
      </li>
      </ul>
      <h2>Percussion</h2>
      <p>
      The General MIDI Percussion Map that maps percussion type to MIDI note is
      supported.
      </p>
      <pre>
      :acoustic_bass_drum =&gt; [:B,1], 
      :bass_drum_1        =&gt; [:C,2],  :side_stick     =&gt; [:Cs,2], :acoustic_snare =&gt; [:D,2],
      :hand_clap          =&gt; [:Ds,2], :electric_snare =&gt; [:E,2],  :low_floor_tom  =&gt; [:F,2],
      :closed_hi_hat      =&gt; [:Fs,2], :high_floor_tom =&gt; [:G,2],  :pedal_hi_hat   =&gt; [:Gs,2],
      :low_tom            =&gt; [:A,2],  :open_hi_hat    =&gt; [:As,2], :low_mid_tom    =&gt; [:B,2],
      :high_mid_tom       =&gt; [:C,3],  :crash_cymbal_1 =&gt; [:Cs,3], :high_tom       =&gt; [:D,3], 
      :ride_cymbal_1      =&gt; [:Ds,3], :chinese_cymbal =&gt; [:E,3],  :ride_bell      =&gt; [:F,3], 
      :tambourine         =&gt; [:Fs,3], :splash_cymbal  =&gt; [:G,3],  :cowbell        =&gt; [:Gs,3], 
      :crash_cymbal_2     =&gt; [:A,3],  :vibraslap      =&gt; [:As,3], :ride_cymbal_2  =&gt; [:B,3],
      :high_bongo         =&gt; [:C,4],  :low_bongo      =&gt; [:Cs,4], :mute_hi_conga  =&gt; [:D,4], 
      :open_hi_conga      =&gt; [:Ds,4], :low_conga      =&gt; [:E,4],  :high_timbale   =&gt; [:F,4], 
      :low_timbale        =&gt; [:Fs,4], :high_agogo     =&gt; [:G,4],  :low_agogo      =&gt; [:Gs,4], 
      :cabasa             =&gt; [:A,4],  :maracas        =&gt; [:As,4], :short_whistle  =&gt; [:B,4],
      :long_whistle       =&gt; [:C,5],  :short_guiro    =&gt; [:Cs,5], :long_guiro     =&gt; [:D,5],  
      :claves             =&gt; [:Ds,5], :hi_woodblock   =&gt; [:E,5],  :low_woodblock  =&gt; [:F,5], 
      :mute_cuica         =&gt; [:Fs,5], :open_cuica     =&gt; [:G,5],  :mute_triangle  =&gt; [:Gs,5], 
      :open_triangle      =&gt; [:A,5],
      :R                  =&gt; :R,      
      </pre>
      <p>
      A percussive tone is defined by
      </p>
      <pre>
      pr(perc, opts)    
      </pre>
      <p>
      Where perc is the General MIDI Percussion code defined above that has a
      default value of <tt>:acoustic_bass_drum</tt>.   
      </p>
       <p>
      Accepted options are,
      </p>
      <ul>
      <li><p>
      <b>:l</b>: Reciprocal length of note, Accepted values are 1, 2, 4,&#8230;,
      max. Where max is the inverse resolution defined in <tt>zgomot.yml</tt>.
      Mapping to standard durations gives: 1 a whole note, 2 a half note, 4 a
      quarter note, 8 and eighth note, &#8230; The default value is 4, a quarter
      note.
      </p>
      </li>
      <li><p>
      <b>:v</b>: The velocity of the note is a number between 0 ad 1 defining its
      loudness. Low values correspond to piano and larger values forte. The
      default is 0.6.
      </p>
      </li>
      </ul>
      <p>
      A <tt>:closed_hi_hat</tt> percussive tone of half note length with velocity
      0.5 would be defined by,
      </p>
      <pre>
      pr(:closed_hi_hat, :l =&gt; 2, :v =&gt; 0.5)    
      </pre>
      <h4>Transforms</h4>
      <p>
      Percussion supports the following transformations,
      </p>
      <ul>
      <li><p>
      <tt>bpm!(bpm)</tt>: change the bits per minute at which the note is played.
      </p>
      </li>
      </ul>
      <h2>Chord Progressions</h2>
      <p>
      Chord Progressions or Roman Numeral Notation permit the definition of a
      melody that is independent of key. Using Chord progressions it is possible
      to iteratively shift the key of a specified sequence of chords.
      </p>
      <p>
      A chord progression consisting of the 7 notes of a specified key in a
      diatonic mode played sequentially will be defined by,
      </p>
      <pre>
      cp(tonic, mode, opts)  
      </pre>
      <p>
      Where tonic is the tonic pitch of the key, mode is one of the 7 diatonic
      modes: <tt>:ionian</tt>, <tt>:dorian</tt>, <tt>:phrygian</tt>,
      <tt>:lydian</tt>, <tt>:mixolydian</tt>, <tt>:aeolian</tt>,
      <tt>:locrian</tt> or a number between 0 and 6 mapping sequentially onto the
      these modes.
      </p>
      <p>
      Accepted options are,
      </p>
      <ul>
      <li><p>
      <tt>:l</tt>: Reciprocal length of chord, Accepted values are <tt>1, 2,
      4,..., max</tt>. Where max is the inverse resolution defined in
      <tt>zgomot.yml</tt>. Mapping to standard durations gives; 1 a whole note, 2
      a half note, 4 a quarter note, 8 and eighth note, &#8230; The default value
      is 4, a quarter note.
      </p>
      </li>
      <li><p>
      <tt>:v</tt>: The velocity of the note is a number between 0 ad 1 defining
      its loudness. Low values correspond to piano and larger values forte. The
      default is 0.6.
      </p>
      </li>
      </ul>
      <p>
      An chord progression in a key of F# dorian at octave 5 with notes of half
      note length and velocity 0.5 would be defined by,
      </p>
      <pre>
      cp([:Fs, 5], :dorian, :l =&gt; 2, :v =&gt; 0.5)
      </pre>
      <h4>Transforms</h4>
      <ul>
      <li><p>
      <tt>tonic!(tonic)</tt>: Change the tonic pitch of the progression.
      </p>
      </li>
      <li><p>
      <tt>mode!(mode)</tt>: Change the mode of the progression
      </p>
      </li>
      <li><p>
      <tt>[](*args)</tt>: By default when a progression is created it only
      consists of one each of the notes in the key played sequentially. Using
      this transformation it is possible to change the the notes played in the
      progression. For example <tt>cp([:Fs, 5], :dorian)[1,5,5,7]</tt> will play
      the sequence <tt>1, 5, 5, 7</tt> instead of <tt>1, 2, 3, 4, 5, 6, 7</tt>.
      </p>
      </li>
      <li><p>
      <tt>velocity=(v)</tt>: Change the velocity of all notes in the progression.
      </p>
      </li>
      <li><p>
      <tt>length=(v)</tt>: Change the length of all notes in the progression.
      </p>
      </li>
      <li><p>
      <tt>bpm!(bpm)</tt>: change the bits per minute at which the chord is
      played.
      </p>
      </li>
      <li><p>
      <tt>octave!(ocatve)</tt>: change the octave of all notes in the
      progression.
      </p>
      </li>
      <li><p>
      <tt>arp!(length)</tt>: arpeggiate the chords in the progression using the
      specified length in units of note length. Accepted values are 1, 2, 4, 8,
      &#8230; resolution, representing arpeggiation by a whole note, half note,
      quarter note, eighth note up to the specified clock resolution.  
      </p>
      </li>
      <li><p>
      <tt>inv!(number)</tt>: The inversion number. A value of zero will leave the
      chord unchanged, 1 is the first inversion and 2 is the second. Higher
      inversions just shift the chord to a higher octave.
      </p>
      </li>
      <li><p>
      <tt>rev!</tt>: Reverse the order in which the notes are played. Only
      noticeable if the chords in the progression are also arpeggiated.
      </p>
      </li>
      </ul>
      <p>
      Progressions internally are arrays of notes so all methods supported by the
      Ruby <tt>Array</tt> class are also supported.
      </p>
      <h2>Note Progressions</h2>
      <p>
      Note Progressions are similar to chord progressions but are composed of
      notes instead of chords. Most of the options and transformation are the
      same. To define a Note Progression use,
      </p>
      <pre>
      np(tonic, mode, opts)  
      </pre>
      <p>
      Where tonic is the tonic pitch of the key, mode is one of the 7 diatonic
      modes: <tt>:ionian</tt>, <tt>:dorian</tt>, <tt>:phrygian</tt>,
      <tt>:lydian</tt>, <tt>:mixolydian</tt>, <tt>:aeolian</tt>,
      <tt>:locrian</tt> or a number between 0 and 6 mapping sequentially onto the
      these modes.
      </p>
      <p>
      Accepted options are,
      </p>
      <ul>
      <li><p>
      <tt>:l</tt>: Reciprocal length of note, Accepted values are 1, 2,
      4,&#8230;, max. Where max is the inverse resolution defined in
      <tt>zgomot.yml</tt>. Mapping to standard durations gives; 1 a whole note, 2
      a half note, 4 a quarter note, 8 and eighth note, &#8230; The default value
      is 4, a quarter note.
      </p>
      </li>
      <li><p>
      <tt>:v</tt>: The velocity of the note is a number between 0 ad 1 defining
      its loudness. Low values correspond to piano and larger values forte. The
      default is 0.6.
      </p>
      </li>
      </ul>
      <p>
      An note progression in a key of F# dorian at octave 5 with notes of half
      note length and velocity 0.5 would be defined by,
      </p>
      <pre>
      np([:Fs, 5], :dorian, :l =&gt; 2, :v =&gt; 0.5)
      </pre>
      <h4>Transforms</h4>
      <ul>
      <li><p>
      <tt>tonic!(tonic)</tt>: Change the tonic pitch of the progression.
      </p>
      </li>
      <li><p>
      <tt>mode!(mode)</tt>: Change the mode of the progression
      </p>
      </li>
      <li><p>
      <tt>[](*args)</tt>: By default when a progression is created it only
      consists of one each of the notes in the key played sequentially using this
      transformation it is possible to change the the notes played in the
      progression. For example <tt>np([:Fs, 5], :dorian)[1,5,5,7]</tt> will play
      the sequence 1, 5, 5, 7 instead of 1, 2, 3, 4, 5, 6, 7.
      </p>
      </li>
      <li><p>
      <tt>velocity=(v)</tt>: Change the velocity of all notes in the progression.
      </p>
      </li>
      <li><p>
      <tt>length=(v)</tt>: Change the length of all notes in the progression.
      </p>
      </li>
      <li><p>
      <tt>bpm!(bpm)</tt>: change the bits per minute at which the chord is
      played.
      </p>
      </li>
      <li><p>
      <tt>octave!(ocatve)</tt>: change the octave of all notes in the
      progression.
      </p>
      </li>
      </ul>
      <p>
      Progressions internally are arrays of notes so all methods supported by the
      Ruby <tt>Array</tt> class are also supported.
      </p>
      <h2>Patterns</h2>
      <p>
      Patterns are heterogeneous arrays of notes, chords, Chord Progressions and
      Note Progressions. Operations applied to the pattern will be delegated to
      the appropriate elements of the pattern array. Patterns also support all
      methods supported by Ruby the <tt>Array</tt> class.
      </p>
      <h2>MIDI Channels</h2>
      <p>
      The MIDI Channel is used to specify MIDI device IO. A channel is created
      with the call,
      </p>
      <pre>
          ch(num)
      </pre>
      <p>
      Where number is the MIDI channel number which must be between 0 and 15. The
      default value is 0.
      </p>
      <p>
      The << operator is used to write patterns to the MIDI IO device.
      </p>
      <p>
      Write a note pattern to MIDI channel 1,
      </p>
      <pre>
      ch(1) &lt;&lt; [n([:C,5]), n(:B), n(:R), n(:G), n(:C,:l=&gt;2), n([:E,5],:l=&gt;2)]
      </pre>
      <p>
      Channels are created within stream blocks which are discussed in the next
      section.
      </p>
      <h2>Streams</h2>
      <p>
      A stream is used to define iteration on a pattern and outputs a stream of
      MIDI data. 
      </p>
      <pre>
      str(name, pattern, opt, &amp;blk)    
      </pre>
      <p>
      Where name is an identifying string defining, pattern is an initial
      pattern, which may be nil, and blk is used to define operations on pattern
      and is yielded pattern.
      </p>
      <p>
      Accepted options are,
      </p>
      <ul>
      <li><p>
      <tt>:lim</tt>: The number of iterations performed by the stream. The
      default value is infinite.
      </p>
      </li>
      </ul>
      <p>
      A program will consist of one or more <tt>str</tt> calls followed by a
      <tt>play</tt> call. Blocks passed to <tt>str</tt> perform operations on the
      yielded pattern and write the results to a MIDI channel. On the call to
      <tt>play</tt> a thread is spawned for each <tt>str</tt> which calls the
      defined blocks the specified number of times.  
      </p>
      <pre>
      str 'grovin-1', cp([:C,3],:ionian), :lim =&gt; 3 do |pattern|
          ch(0) &lt;&lt; do_stuff_1(pattern)
      end

      str 'grovin-2', cp([:A,5],:dorian), , :lim =&gt; 3 do |pattern|
          ch(1) &lt;&lt; do_stuff_2(pattern)
      end
      play
      </pre>
      <p>
      Within a <tt>str</tt> block the following attributes are available,
      </p>
      <ul>
      <li><p>
      <tt>count</tt>: Current iteration.     
      </p>
      </li>
      <li><p>
      <tt>patterns</tt>: Chronological list of patterns.
      </p>
      </li>
      </ul>
      <h2>Callbacks</h2>
      <ul>
      <li><p>
      <tt>before_start</tt>: called before application starts.
      </p>
      </li>
      </ul>
      <h2>Logging</h2>
      <p>
      By default logging is performed to STDOUT with level <tt>Logger::WARN</tt>.
      This can be changed by defining a new <tt>logger</tt> or specifying a new
      logger level in <tt>before_start</tt>. 
      </p>
      <h2>Examples</h2>
      <p>
      Many examples can be found at <a
      href="https://github.com/troystribling/zgomot/tree/master/examples/.">github.com/troystribling/zgomot/tree/master/examples/.</a>
      </p>
      <h3>Markov Matrix</h3>
      <p>
      The Markov Matrix randomly plays a list of specified patterns with
      specified probabilities. The size of the matrix is determined by the number
      of patterns. For each pattern a list transition probabilities must be
      defined for all other patterns.
      </p>
      <h3>Methods</h3>
      <ul>
      <li><p>
      <tt>add(transition_probs, &amp;blk)</tt>:  Add a pattern to the Markov
      matrix. Arguments are: <tt>transitition_probs</tt> a list that defines the
      transition probabilities between patterns and <tt>blk</tt> is a block in
      which the pattern is defined.  
      </p>
      </li>
      <li><p>
      <tt>next</tt>: Called within a <tt>str</tt> block to return the next random
      pattern.
      </p>
      </li>
      </ul>
      <h4>Code Sample</h4>
      <p>
      A simple Markov Matrix with two patterns.
      </p>
      <pre>
      m = mark
      m.add([0.6, 0.4]) do
        np([:A,4],:dorian,:l=&gt;4)[7,5,3,1,]
      end
      m.add([0.4, 0.6]) do
        np([:A,4],:ionian,:l=&gt;4)[7,5,3,1]
      end

      str 'markov' do
        ch &lt;&lt; m.next
      end

      play
      </pre>
      <h3>Multiple MIDI Channels</h3>
      <p>
      A program can write to multiple MIDI channels with multiple <tt>str</tt>
      calls. The following example writes the same melody to two different MIDI
      channels at different bit rates producing a phasing effect.
      </p>
      <pre>
      str 'melody-1', np([:B,3],nil,:l=&gt;4)[1,4], :lim=&gt;:inf do |pattern|
        ch(0) &lt;&lt; pattern.mode!((count/4) % 7 + 1)
      end

      str 'melody-2', np([:B,3],:ionian,:l=&gt;4)[1,4].bpm!(16.0/15.0), :lim=&gt;:inf  do |pattern|
        ch(1) &lt;&lt; pattern
      end

      play
     </pre>
      <h3>Progression with Length and Velocity Defined for each Note</h3>
      <p>
      Different note duration and velocities for each note in a progression can
      be defined by by using arrays for the length and velocity options.
      </p>
      <pre>
      str 'prog', cp([:A,4],nil,:l=&gt;[4,4,8], :v=&gt;[0.6, 0.4, 0.7])[7,5,3], :lim=&gt;6 do |pattern|
        ch &lt;&lt; pattern.mode!(count)
      end

      play
      </pre>
      <h2>Copyright</h2>
      <p>
      Copyright &#169; 2009 Troy Stribling. See LICENSE for details.
      </p>
    </div>
  </div>
<% end %>


